import os
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image

class MineDetectionDataset(Dataset):
    def __init__(self, img_dir, annot_dir, transform=None, target_size=(640, 640)):
        self.img_dir = img_dir
        self.annot_dir = annot_dir
        self.transform = transform
        self.target_size = target_size
        self.img_files = [f for f in os.listdir(img_dir) if f.endswith('.jpg')]

    def __len__(self):
        return len(self.img_files)

    def __getitem__(self, idx):
        img_path = os.path.join(self.img_dir, self.img_files[idx])
        annot_path = os.path.join(self.annot_dir, self.img_files[idx].replace('.jpg', '.txt'))
        
        # Load image and resize
        image = Image.open(img_path).convert("RGB")
        image = image.resize(self.target_size)
        
        # Load annotations
        boxes, labels = self.parse_yolo_annotations(annot_path)
        
        if self.transform:
            image = self.transform(image)
        
        # Convert boxes and labels to tensor format
        boxes = torch.tensor(boxes, dtype=torch.float32)
        labels = torch.tensor(labels, dtype=torch.int64)
        
        target = {"boxes": boxes, "labels": labels}
        return image, target

    def parse_yolo_annotations(self, annot_path):
        boxes = []
        labels = []
        with open(annot_path, "r") as f:
            for line in f:
                data = line.split()
                # YOLO format: label, x_center, y_center, width, height (normalized)
                label = int(data[0])
                x_center, y_center, width, height = map(float, data[1:])
                x_min = (x_center - width / 2) * self.target_size[0]
                y_min = (y_center - height / 2) * self.target_size[1]
                x_max = (x_center + width / 2) * self.target_size[0]
                y_max = (y_center + height / 2) * self.target_size[1]
                boxes.append([x_min, y_min, x_max, y_max])
                labels.append(label)
        return boxes, labels
